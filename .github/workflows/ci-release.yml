name: Build and Release

on:
  push:
    branches:
      - main
      - "feature/**"

jobs:
  bump:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect bump type and update Cargo.toml
        id: bump
        shell: bash
        run: |
          MSG="$(git log -1 --pretty=%B | tr -d '\n')"
          echo "Último commit: $MSG"

          CURRENT_VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d '"' -f2)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          if echo "$MSG" | grep -qiE '^feat:'; then
            ((MINOR++)); PATCH=0
          elif echo "$MSG" | grep -qiE '^fix:'; then
            ((PATCH++))
          elif echo "$MSG" | grep -qiE '^breaking'; then
            ((MAJOR++)); MINOR=0; PATCH=0
          else
            ((PATCH++))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "Nova versão: $NEW_VERSION"
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit direto na main com nova versão
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"

          git add Cargo.toml
          git commit -m "chore: bump version to v${{ steps.bump.outputs.version }} [skip release]"

          git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin main

  release:
    if: github.ref_name == 'main' && !contains(github.event.head_commit.message, '[skip release]')
    needs: bump
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Git User Info
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-runner@github.com"

      - name: Build and Package
        run: |
          mkdir -p dist
          cargo build --release
          cp target/release/* dist/ || true

      - name: Zip binary
        uses: vimtor/action-zip@v1
        with:
          files: dist/
          dest: dist/rust-emulas.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rust-emulas
          path: dist/*.zip
          if-no-files-found: error

      - name: Autenticar CLI do GitHub
        run: echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Extract version
        id: get_version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        run: |
          gh release create v${{ steps.get_version.outputs.version }} dist/*.zip --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
