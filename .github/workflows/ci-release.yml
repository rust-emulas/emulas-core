name: Build and Release

on:
  push:
    branches:
      - main
      - "feature/**"

jobs:
  build:
    if: ${{ !contains(github.event.head_commit.message, '[skip release]') }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2025]
        include:
          - os: ubuntu-latest
            BUILD_TARGET: x86_64-unknown-linux-gnu
            EXT: ""
          - os: windows-2025
            BUILD_TARGET: x86_64-pc-windows-msvc
            EXT: ".exe"

    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4

      - name: Cache
        id: cache-cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-v1

      - name: Install SDL Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git make \
          pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
          libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \
          libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev \
          libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
          libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev

      - name: Build Project
        run: |
          cargo test && cargo build --release --target ${{ matrix.BUILD_TARGET }}

      - name: Rename binary
        if: github.ref_name == 'main'
        run: |
          mkdir -p dist
          cp -r target/${{ matrix.BUILD_TARGET }}/release dist/

      - name: Zip binary
        if: github.ref_name == 'main'
        uses: vimtor/action-zip@v1
        with:
          files: dist/
          dest: dist/rust-emulas-${{ matrix.BUILD_TARGET }}.zip

      - name: Upload artifact
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: rust-emulas-${{ matrix.BUILD_TARGET }}
          path: dist/*.zip
          if-no-files-found: error

  bump:
    if: github.ref_name == 'main' && !contains(github.event.head_commit.message, '[skip release]')
    needs: build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect bump type and update Cargo.toml
        id: bump
        shell: bash
        run: |
          MSG="$(git log -1 --pretty=%B | tr -d '\n')"
          echo "Último commit: $MSG"

          CURRENT_VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d '"' -f2 | tr -d '\r')
          echo "Versão atual: $CURRENT_VERSION"

          MAJOR=$(echo "$CURRENT_VERSION" | cut -d '.' -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d '.' -f2)
          PATCH=$(echo "$CURRENT_VERSION" | cut -d '.' -f3)

          echo "MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"

          if echo "$MSG" | grep -qiE '^feat:'; then
            ((MINOR++)); PATCH=0
          elif echo "$MSG" | grep -qiE '^fix:'; then
            ((PATCH++))
          elif echo "$MSG" | grep -qiE '^breaking'; then
            ((MAJOR++)); MINOR=0; PATCH=0
          else
            ((PATCH++))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "Nova versão: $NEW_VERSION"
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit e push via SSH direto na main com [skip release]
        env:
          EMULAS_SSH_KEY: ${{ secrets.EMULAS_SSH_KEY }}
        run: |
          echo "$EMULAS_SSH_KEY" > ./ci_key
          chmod 600 ./ci_key
          eval "$(ssh-agent -s)"
          ssh-add ./ci_key

          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git config core.sshCommand "ssh -i ./ci_key -o StrictHostKeyChecking=no"

          git remote set-url origin git@github.com:${{ github.repository }}.git

          git add Cargo.toml
          git commit -m "chore: bump version to v${{ steps.bump.outputs.version }} [skip release]"
          git push origin HEAD:main

  release:
    if: github.ref_name == 'main' && !contains(github.event.head_commit.message, '[skip release]')
    needs: bump
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Set Git User Info
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-runner@github.com"

      - name: Publish built binary to GitHub releases
        run: |
          gh release create v${{ needs.bump.outputs.version }} artifacts/*/*.zip --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
